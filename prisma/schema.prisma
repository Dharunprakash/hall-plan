// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// A simple Chat schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum HallArrangementType {
  STAGGERED
  ALTERNATE
  NORMAL
}

// The User model is used by the NextAuth.js authentication library
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
}

model College {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  logo        String?
  coverImage  String?
  name        String?
  district    String?
  description String?

  code  String? @unique @default("xxxx")
  aishe String? @unique @default("C-xxxxx")

  state   String?
  pincode String?
  address String?
  phone   String?
  email   String?
}

model Department {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  code     String
  students Student[]
  halls    Hall[]
  exams    Exam[]

  @@index([name], name: "department_index")
  @@index([code], name: "department_index_code")
}

model Student {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  regno    String  @unique
  rollno   Int
  name     String
  year     Int
  section  String
  semester Int
  vertical String? @default("NONE")
  batch    String? @default("2021-2025")

  examIds String[] @db.ObjectId
  exams   Exam[]   @relation(fields: [examIds], references: [id])

  departmentId String     @db.ObjectId
  department   Department @relation(fields: [departmentId], references: [id])
  Seat         Seat[]

  @@index([rollno, departmentId, year, section], name: "student_index")
  @@index([rollno, departmentId, section, batch], name: "student_index_batch")
}

model Hall {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  hallno Int

  rows  Int
  cols  Int
  seats Seat[]

  type HallArrangementType? @default(NORMAL)

  // HALL HISTORY
  rootHallId  String? @db.ObjectId
  rootHall    Hall?   @relation("hallHistory", fields: [rootHallId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hallHistory Hall[]  @relation("hallHistory")

  departmentId String     @db.ObjectId
  department   Department @relation(fields: [departmentId], references: [id])
  Exam         Exam?      @relation(fields: [examId], references: [id])
  examId       String?    @db.ObjectId
}

model Seat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  row       Int
  col       Int
  isBlocked Boolean  @default(false)
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @db.ObjectId
  year      Int?
  semester  Int?
  hallId    String   @db.ObjectId
  hall      Hall     @relation(fields: [hallId], references: [id], onDelete: Cascade)

  @@index([row, col, hallId], name: "seat_index")
}

enum ExamType {
  THEORY
  PRACTICAL
  MODEL_PRACTICAL
  INTERNAL
}

enum OddEven {
  ODD
  EVEN
}

model Exam {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         ExamType    @default(INTERNAL)
  // ONLY FOR INTERNAL AND MODEL_PRACTICAL THE DEPARTMENT IS REQUIRED
  departmentId String?     @db.ObjectId
  department   Department? @relation(fields: [departmentId], references: [id])

  semester     OddEven
  studentIds   String[]  @db.ObjectId
  students     Student[] @relation(fields: [studentIds], references: [id])
  halls        Hall[]
  academicYear String
  dates        Date[]
  timingFn     DateTime?
  timingAn     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Date {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  date   DateTime
  fn     Timing?  @relation("fn")
  an     Timing?  @relation("an")
  examId String   @db.ObjectId
  exam   Exam     @relation(fields: [examId], references: [id])
}

model Timing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  startTime DateTime
  endTime   DateTime
  dateId    String   @unique @db.ObjectId
  fnDate    Date?    @relation(fields: [dateId], references: [id], name: "fn")
  anDate    Date?    @relation(fields: [dateId], references: [id], name: "an")
}

// The Account model is used by the NextAuth.js authentication library
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// The PasswordResetToken and VerificationToken models are used by the NextAuth.js authentication library
model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
